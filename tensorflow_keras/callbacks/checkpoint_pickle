#https://gist.github.com/eyalzk/215a53225b38c411f3cc7e29de1f8083#file-resume_example4-py
# from https://towardsdatascience.com/resuming-a-training-process-with-keras-3e93152ee11a

from keras.callbacks import ModelCheckpoint
import pickle

class ModelCheckpointEnhanced(ModelCheckpoint):
    def __init__(self, *args, **kwargs):
        # Added arguments
        self.callbacks_to_save = kwargs.pop('callbacks_to_save')
        self.callbacks_filepath = kwargs.pop('callbacks_filepath')
        super().__init__(*args, **kwargs)

    def on_epoch_end(self, epoch, logs=None):
        # Run normal flow:
        super().on_epoch_end(epoch,logs)

        # If a checkpoint was saved, save also the callback
        filepath = self.callbacks_filepath.format(epoch=epoch + 1, **logs)
        if self.epochs_since_last_save == 0 and epoch!=0:
            if self.save_best_only:
                current = logs.get(self.monitor)
                if current == self.best:
                    # Note, there might be some cases where the last statement will save on unwanted epochs.
                    # However, in the usual case where your monitoring value space is continuous this is not likely
                    with open(filepath, "wb") as f:
                        pickle.dump(self.callbacks_to_save, f)
            else:
                with open(filepath, "wb") as f:
                    pickle.dump(self.callbacks_to_save, f)
