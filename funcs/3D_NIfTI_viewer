import nibabel as nib
import numpy as np
from PIL import Image as ImgPIL

def visualize(path):
  """
  Visualizador de metástases em um plot 3D de transição transversal (eixo z)
  """
  img = nib.load(path)
  data_img = img.get_fdata()
  data_img = np.transpose(data_img, (1, 2, 0))
  data_array = np.array(data_img/np.max(data_img))*255

  # Definir tamanho para redimensionar
  x_size = 64
  y_size = 64

  resized = np.zeros((np.shape(data_array)[2], x_size, y_size)) #novo tamanho mantendo a quantidade de slices
  transposed = np.transpose(data_array, (2,0,1)) # Trocar a posição do eixo Z para a última posição do data_array para encaixar no shape do resized


  # O resize tem que ser 64 x 64 para não chegar no limite de RAM
  for i in range(len(transposed)):
    resized[i] = np.array(ImgPIL.fromarray(np.uint8(transposed[i])).resize((x_size, y_size)))

  retransposed = np.transpose(resized, (1,2,0)) # Voltar o shape pro formato original, agora com o novo tamanho de 128x128 por slice

  vol = retransposed
  volume = vol.T
  r, c = volume[0].shape

  # Define frames
  import plotly.graph_objects as go

  nb_frames = volume.shape[0]

  fig = go.Figure(frames=[go.Frame(data=go.Surface(
      z=(nb_frames/10 - k * 0.1) * np.ones((r, c)),
      surfacecolor = np.flipud(volume[nb_frames - 1 - k]),
      cmin=0, cmax=200
      ),
      name=str(k) # you need to name the frame for the animation to behave properly
      )
      for k in range(nb_frames)])

  # Add data to be displayed before animation starts
  fig.add_trace(go.Surface(
      z = nb_frames/10 * np.ones((r, c)),
      surfacecolor = np.flipud(volume[nb_frames - 1]),
      colorscale = 'Gray',
      cmin = 0, cmax = 200,
      colorbar = dict(thickness = 20, ticklen = 4)
      ))


  def frame_args(duration):
      return {
              "frame": {"duration": duration},
              "mode": "immediate",
              "fromcurrent": True,
              "transition": {"duration": duration, "easing": "linear"},
          }

  sliders = [
              {
                  "pad": {"b": 10, "t": 60},
                  "len": 0.9,
                  "x": 0.1,
                  "y": 0,
                  "steps": [
                      {
                          "args": [[f.name], frame_args(0)],
                          "label": str(k),
                          "method": "animate",
                      }
                      for k, f in enumerate(fig.frames)
                  ],
              }
          ]

  # Layout
  fig.update_layout(
          title='Slices in volumetric data',
          width=550,
          height=550,
          scene=dict(
                      zaxis=dict(range=[-0.1, nb_frames/10], autorange=False),
                      aspectratio=dict(x=1, y=1, z=1),
                      ),
          updatemenus = [
              {
                  "buttons": [
                      {
                          "args": [None, frame_args(50)],
                          "label": "&#9654;", # play symbol
                          "method": "animate",
                      },
                      {
                          "args": [[None], frame_args(0)],
                          "label": "&#9724;", # pause symbol
                          "method": "animate",
                      },
                  ],
                  "direction": "left",
                  "pad": {"r": 10, "t": 70},
                  "type": "buttons",
                  "x": 0.1,
                  "y": 0,
              }
          ],
          sliders = sliders
  )

  fig.show()
