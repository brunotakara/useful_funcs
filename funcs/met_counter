import numpy as np
import nibabel as nib
from scipy.ndimage import label

def identify_clusters(mask, min_cluster_size = 5):
    # Identifica os clusters de voxels na máscara usando rotulação de componentes conectados
    labeled_mask, num_clusters = label(mask)

    # Filtrar clusters com menos de min_cluster_size voxels, que por default é 5
    filtered_clusters = labeled_mask.copy()
    for cluster_id in range(1, num_clusters + 1):
        cluster_size = np.sum(labeled_mask == cluster_id)
        if cluster_size < min_cluster_size:
            filtered_clusters[labeled_mask == cluster_id] = 0

    # Renumerar os clusters filtrados
    filtered_clusters, num_filtered_clusters = label(filtered_clusters > 0)
    return filtered_clusters, num_filtered_clusters

def count_clusters(mask1_path, mask2_path):
    # Carregar as máscaras de segmentação
    mask1 = nib.load(mask1_path).get_fdata()
    mask2 = nib.load(mask2_path).get_fdata()

    # Identificar clusters de voxels em cada máscara
    mask1_clusters, num_mask1_clusters = identify_clusters(mask1)
    mask2_clusters, num_mask2_clusters = identify_clusters(mask2)

    return num_mask1_clusters, num_mask2_clusters
